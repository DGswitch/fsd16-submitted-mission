{
  "button" : {

    "openQR":                 "Scan QR",
    "selectToken":            "Select Crypto"
  },

  "input": {

    "placeholder": {

      "address":              "Please enter a recipients address"
    }
  },

  "unknown":                  "unknown token name",

  "info": {
    "available":              "Available",
    "fee":                    "Transaction fees",
    "options":                "Options",
    "select":                 "Select inputs"
  },

  "willEmptyAccount":         {
    "headline":               "Attention, please!",
    "text":                   "This transaction will empty the account. Are you sure you want to proceed?"
  },

  "add": {

    "recipient": {

      "label":                "Add recipient",
      "caption":              "Another transaction clears the recipient list. Click the button below to add a new recipient."
    }
  },

  "step": {

    "receiveAddr": {

      "label":                "$t(common:label:receiveAddress)",
      "caption":              "Enter the receive address of the wallet you want to send funds to",
      "hint":                 "$t(common:address:enterReceive)",
      "error":                "$t(common:address:invalid)",
      "delete":               "Delete Receiver",
      "addrBook": {

        "label":              "$t(common:label:addrbook)",
        "caption":            "Select an address from the address book as receiver.",
        "show":               "Open $t(common:label:addrbook)"
      },

      "qrcode": {

        "show":               "Open QR-Code Reader"
      },

      "adahandle": {

        "label":                "ADA Handle disclaimer",
        "text":                 "$t(common:appName) cannot check if the ADA Handle belongs to a specific person! It is entirely your own responsibility to verify that this ADA Handle belongs to the person you intend to send funds to.\n\n If this ADA Handle has a typo or belongs to a different person, your funds will be lost!)",
        "icon":                 "",

        "change": {
          "label":                "ADA Handle address changed!",
          "text":                 "Old address stored in address book:\n####OLD####\n\nNew address:\n####NEW####\n\nThe address that is represented by the ADA Handle ###HANDLE### changed since you added it to your address book.\nThis means the ADA Handle was moved to a different wallet or account.\n\nIf you send funds, they will go to a different address than what is stored in your address book.\nYou have the option to overwrite the current address book entry by clicking the button below.",
          "icon":                 "mdi mdi-alert-octagon-outline"
        },

        "changeInTx": {
          "label":                "Please note!",
          "text":                 "The address that is represented by the ADA Handle ###HANDLE### changed since you started to build this transaction. \n             This means the ADA Handle was moved to a different wallet or account. If you send funds, they will go to a different address than what you initially intended.\n\n            old address: ####OLD####\n            new address: ####NEW####",
          "icon":                 "mdi mdi-alert-octagon-outline"
        },

        "onBlocklist":            "Cannot send to ADA Handle that is on the handle blocklist!",

        "notOnAllowlist": {
          "label":                "Please confirm sending to ADA Handle",
          "caption":              "The ADA Handle ###HANDLE### is not on your ADA Handle allowlist (see Preferences in main menu).\nPlease confirm this dialog to continue sending.",
          "cancel":               "Cancel sending",
          "confirm":              "Send to Handle"
        }
      },

      "script": {
        "label":                "Warning! Possible loss of funds!",
        "text":                 "Do not send funds directly to a smart contract or native script address!\n\n          In most cases, you do not send funds directly to a smart contract address, but interact with it through a website that sets up a transaction for you.          If you send funds directly, the smart contract may fail, and you may lose your funds!",
        "icon":                 "mdi mdi-alert-octagon-outline"
      },

      "milkomeda": {
        "label":                "Important!",
        "text":                 "<p>The address you specified is a <b>Milkomeda C1 side-chain</b> address.<br><br>          <b>DO NOT</b> attempt to send to a Coinbase, Binance or any other ETH address.          <b>Make sure you own the keys to that address!</b><br><br>          Funds will be sent to a Cardano smart contract which locks your funds and makes it available on the <b>Milkomeda C1 side-chain</b> as <b>milkADA</b>.          <br>It is entirely your own responsibility to verify that this address exists on the Milkomeda C1 side-chain and that you own the keys.</p>",
        "warning": {
          "headline":           "Please confirm!",
          "text1":               "<p>The address you specified is a <b>Milkomeda C1 side-chain</b> address.",
          "text2":               "<b>DO NOT</b> attempt to send to a Coinbase, Binance or any other ETH address. <b>Make sure you own the keys to that address!</b><br><br>",
          "text3":               "By confirming you acknowledge that funds will be sent to a Cardano smart contract which locks your funds and makes it available on the <b>Milkomeda C1 side-chain</b> as <b>milkADA</b>.",
          "text4":               "$t(appName) is NOT responsible for funds send to a wrong chain and that might be inaccessible after this transaction.",
          "text5":               "<br>It is entirely your own responsibility to verify that this address exists on the Milkomeda C1 side-chain and that you own the keys. </p>"
        },
        "icon":                 "mdi mdi-alert-octagon-outline",

        "fee":                  {
          "info":               "This fee will be deducted by Milkomeda, when you receive your funds on the Milkomeda chain.",
          "mainnetCurrency":    "milkADA",
          "testnetCurrency":    "milkTADA"
        },

        "error": {
          "minAmount":          "The minimum amount to use the milkomeda bridge is ###MIN### lovelace.",
          "resolve":            "We could not resolve the address on the milkomeda chain.\nPlease try again.",
          "network":            "The current network does not support milkomeda. Please switch to mainnet."
        }
      }
    },

    "assets": {

      "label":                  "Add assets",

      "withdrawal":             "Force withdrawal of rewards together with transaction.",
      "utxoManagement":         "Allow advanced UTxO management.",
      "utxoManagementHover":    "$t(common:appName will take care of your utxo management, create more outputs, split large outputs etc. This allows for more parallel transactions to take place later on.)",

      "ada": {

        "label":                "$t(common:txtype:ada)",
        "hint":                 "0.000000"
      },

      "info": {

        "default":              "$t(common:assets:info:default)",
        "all":                  "$t(common:assets:info:all)",
        "allRewards":           "$t(common:assets:info:allRewards)",
        "tokens":               "$t(common:assets:info:tokens)",
        "lockedUtxos":          "$t(common:assets:info:lockedUtxos)"
      },

      "error": {

        "minUtxo":              "$t(common:error:minUtxo)",
        "fundsLow":             "$t(common:error:fundsLow)",
        "account":              "No active account",
        "minoutput":            "One of the outputs needs at least ###AMOUNT### to hold the tokens.",
        "milkomeda": {
          "minimum":            "Minimum token amount for bridging is ###AMOUNT###."
        }
      },

      "warning": {

        "notalladded":          "Adding more assets to this output is not allowed. Add another output to include more assets. There can only up to three fully filled outputs in a transaction."
      },

      "token": {

        "label":                "Tokens",
        "count":                "asset(s) selected to be included in transaction.",
        "all":                  "All",

        "info": {

          "sendlabel":          "Amount to Send",
          "added":              "$t(common:assets:added)",
          "removed":            "$t(common:assets:removed)"
        }
      },

      "button": {

        "back":                 "$t(common:label:back)",
        "all":                  "$t(common:label:all)",
        "next":                 "$t(common:label:next)",

        "collection": {
          "add":                "Add collection",
          "remove":             "Remove collection"
        },

        "token": {

          "tokens":             "Tokens",
          "addToken":           "Add token(s)",
          "addTokenHover":      "No tokens left to add.",
          "send":               "Add Token",
          "cancel":             "$t(common:label:cancel)",
          "add":                "Add assets",
          "edit":               "Edit assets",
          "select":             "$t(common:label:select)",
          "addall":             "Add All",
          "addsearch":          "Add All Filtered",
          "addpage":            "Add All on Page",
          "reset":              "$t(common:label:reset)",
          "remove":             "$t(common:label.remove)",
          "removeAll":          "Remove all",
          "removeSelected":     "Remove selected",
          "all":                "Show All Tokens",
          "selected":           "Show Selected Tokens"
        }
      }
    },

    "confirm": {

      "label":                  "$t(common:label:confirm)",
      "caption":                "Please review the transaction before signing",

      "password":               "$t(spending:sign)",

      "info": {

        "ledger":               "Press \"Sign\" and follow the directions on your Ledger device. You might have to select your Ledger device in a browser pop-up window.",
        "trezor":               "Press \"Sign\" and follow the directions on the opened Trezor Connect browser tab to sign.",
        "readonly":             "This wallet is read-only and unable to sign.",
        "submit":               "Transaction successfully signed, press the $t(common.label.submit button to send it to the blockchain.)",
        "submitList":           "Transaction successfully signed and automatically submitted."
      },

      "error": {

        "expired":              "Unable to submit! Transaction life time has expired. Please recreate the transaction with a new expiration date (TTL)."
      },

      "loading": {

        "ledger":               "Please follow the directions in the Cardano app on your Ledger device to sign the transaction.",
        "trezor":               "Please follow the directions outlined in the opened Trezor Connect browser tab and on your Trezor device to sign the transaction."
      },

      "multitx": {

        "label":                "Transactions Summary",
        "doubleSpend":          "Invalid transaction list, input utxo is spent more than 'once':\n"
      },

      "preview": {

        "label":                "Transaction Preview",
        "caption":              "Addresses marked as \"own\" belong to your wallet. \"ext\" marks external wallet addresses."
      },

      "button": {

        "back":                 "$t(common:label:back)",
        "sign":                 "$t(common:label:sign)",
        "submit":               "$t(common:label:submit)",
        "download":             "$t(common:label:download)",
        "debug":                "debug $t(common:label:download)",

        "reset":                "$t(common:label:reset)",
        "save":                 "$t(common:label:sign)"
      }
    },

    "submit": {

      "label":                  "$t(common:label:submit)",
      "caption":                "$t(common:submitting)",

      "status": {

        "unknown":              "$t(common:tx:status:unknown)",
        "sending":              "$t(common:tx:status:sending)",
        "pending":              "$t(common:tx:status:pending)",
        "onchain":              "$t(common:tx:status:onchain)",
        "verified":             "$t(common:tx:status:verified)",
        "failed":               "$t(common:tx:status:failed)"
      },

      "info": {

        "submitting":           "$t(common:tx:submitting)",
        "waiting":              "The transaction will be included in one of the upcoming blocks.",
        "onchain":              "Included in transaction, waiting on wallet 'sync': ",
        "included":             "$t(common:tx:included)"
      },

      "button": {

        "back":                 "$t(common:label:retry)"
      }
    },

    "metadata": {

      "label":                  "Add on-chain $t(common:label:message)",
      "caption":                "Add a message/comment/memo to the transaction.\nPress \"ENTER\" for multi-line message.",
      "enableEncryption":       "Enable encryption",

      "hint":                   "Enter a transaction message",
      "info":                   "The message is limited to a 64 byte text string.",

      "error": {

        "overflow":             "Number of characters per line is limited to 64. Press Enter to add a new line",
        "invalidJSON":          "Not a valid Cardano JSON general metadata schema."
      }
    }
  },

  "page": {
    "title":                  "Send",
    "header":                 "Here you can transfer funds and any type of token / nft that are supported by Cardano.",
    "caption":                "Each transaction can have multiple recipients, making sending assets to different entities very easy and affordable."
  },

  "address": {
    "add":                    "Add Address",
    "selected":               "Selected target is wallet: \"{{wallet_name}}\" and account \"{{account_name}}\"",
    "select": {
      "label":                "Select recipient",
      "caption":              "Select an account from one of your wallets as a recipient."
    },
    "recipient": {
      "add":                  "Add Recipient"
    }
  },

  "addressBook": {

    "label":                  "Address Book",

    "select": {
      "label":                  "Select from address book",
      "caption":                "Choose an address from your address book as recipient."
    },

    "selected": {
      "label":                  "Addressbook entry",
      "caption":                "You selected \"{{name}}\" from the address book."
    }
  },

  "qr": {
    "label":                  "QR Code",
    "caption":                "Scan a QR Code and use it as an address."
  },

  "options" :{

    "headline":                 "Send Options",

    "is": {

      "label":                  "Input Selection",
      "caption":                "Take control over input selection by spending specific utxo\"s in your account.",
      "reset":                  "Reset Input Selection"
    },

    "import": {

      "label":                  "Import Transaction",
      "caption":                "Import an unsigned or signed transactions, exported from Eternl or sources."
    },

    "metadata": {

      "label":                  "Custom Metadata",
      "caption":                "Add a custom metadata schema in JSON format according to specification.",
      "hint":                   "Paste / Enter JSON",

      "urllabel":               "Documentation about the metadata json format on cardano.org",
      "added":                  "Following metadata was added to the transaction:",

      "schemainfo": {

        "NoConversions":        "Faithfully converts between the minimal shared feature set between JSON and Metadata.",
        "BasicConversions":     "Adds additional support for byte (as hex strings) and integer keys (as strings).",
        "DetailedSchema":       "Verbose JSON schema but with most flexibility for metadata conversion."
      },

      "error": {

        "headline":             "Not a valid Cardano JSON general metadata schema",
        "json":                 "Invalid JSON.",
        "label":                "Invalid label(s).\nTop level keys must be unique integers in the range -(2^64 - 1) to (2^64 - 1)."
      }
    },

    "housekeeping": {

      "label":                  "Housekeeping",
      "caption":                "Utilities to reduce the transaction fee for future transactions and to keep your account in a manageable state."
    },

    "tf": {

      "label":                  "Token Fragmentation",
      "caption":                "Spread your assets over multiple utxo's to lower fees for future transactions."
    },

    "cu": {

      "label":                  "UTxO Collection",
      "caption":                "Collect UTxOs of this account, basically merging them into fewer ones. Will create up to 10 transactions at a time. Processing might take a while."
    },

    "ms": {

      "label":                  "Special Collection",
      "label2":                 "Collect in Wallet",
      "caption":                "Collect UTxOs of this ms fee wallet, basically merging them into fewer ones. Will create up to 10 transactions at a time. Processing might take a while."
    },

    "donation": {
      "label":                  "Donate 1 ADA to support Eternl development",
      "caption":                "We hope you like Eternl! Please consider sending 1 ADA with this transaction to support the development of our project."
    }
  },

  "mode": {
    "conflict": "The address you entered could belong to multiple projects, please select the one you want to use.",
    "label": "Send modes",
    "description": "A list of available send modules",
    "list": {
      "cardano": {
        "label": "Cardano",
        "caption": "A normal cardano address.",
        "description": "A Cardano address starts with addr1 and that is not a script address.",
        "disable": "This mode cannot be disabled."
      },
      "cardanoScript": {
        "label": "Cardano Script",
        "caption": "A script address.",
        "description": "A Cardano script address is used for smart contracts and starts with addr1 followed by a specific pattern.",
        "disable": "If this mode is disabled, you won't be able to send to script addresses."
      },
      "adaHandle": {
        "label": "ADA Handle",
        "caption": "A human-readable Cardano address.",
        "description": "An ADA Handle is a unique, NFT-based identifier that can be used as a simplified Cardano address, starting with $.",
        "disable": "If this mode is disabled, you won't be able to resolve addresses from ada handles."
      },
      "milkomeda": {
        "label": "Milkomeda",
        "caption": "A Milkomeda C1 address.",
        "description": "Milkomeda addresses are EVM-compatible and start with '0x', allowing Cardano assets to be used on an Ethereum-like sidechain.",
        "disable": "If this mode is disabled, you won't be able to send to the milkomeda blockchain."
      },
      "unstoppableDomains": {
        "label": "Unstoppable Domains",
        "caption": "A blockchain domain name.",
        "description": "Unstoppable Domains are decentralized domain names that can be linked to various cryptocurrency addresses, including Cardano.",
        "disable": "If this mode is disabled, you won't be able to resolve addresses from unstoppable domains."
      }
    },
    "disabled": {
      "label": "Address target mode disabled!",
      "description": "The address you entered is a {{module}} address. To send to this address, enable the send module under $t(settings:app.label) > $t(send:mode.label)"
    }
  }
}


